#!/usr/bin/env python
# vim: set fileencoding=utf-8
# Copyright (c) 2016-, Simon Lundstr√∂m <simlu@su.se>, IT Services, Stockholm University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# Neither the name of Stockholm University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from proton import Message, SSLDomain, Url
from proton.utils import BlockingConnection
from pynag.Plugins import PluginHelper,ok,warning,critical,unknown
import logging
import os.path
import time

## Create the plugin option
np = PluginHelper()

# Configure logging
logging.basicConfig()
log = logging.getLogger(os.path.basename(__file__))

## Command line arguments
np.parser.add_option("-H", "--hostname",
    help="Hostname to connect to (default: %default)",
    default="localhost",
    )
np.parser.add_option("-P", "--port",
    help="Port to connect with",
    type="int",
    )
np.parser.add_option("-u", "--username",
    help="Username to connect with (default: %default)",
    default="system",
    )
np.parser.add_option("-p", "--password",
    help="Password to connect with (default: %default)",
    default="manager",
    )
np.parser.add_option("-s", "--ssl",
    help="Use SSL when connecting (default: %default)",
    default=False,
    action="store_true",
    )
np.parser.add_option("-c", "--cafile",
    help="CA to verify against when using SSL (default: %default)",
    default="/etc/ssl/certs/ca-certificates.crt",
    )

np.parse_arguments()

# Set loglevel based on verbose
if np.options.verbose:
  log.setLevel(logging.DEBUG)

# Santiy checks

# Change the port if not set and we're using SSL
if np.options.ssl and not np.options.port:
  # FIXME Add INFO that we are changing the port if verbose
  np.options.port = 5671

# Ensure we have a CAfile if SSL is enabled (and that it exists)
if np.options.ssl and (not np.options.cafile or not os.path.isfile(np.options.cafile)):
  np.exit(exit_code=critical, summary="SSL is enabled but option 'cafile' wasn't set or it doesn't exist (%s)" % (np.options.cafile))

try:
  # Set SSL settings
  ssl_domain = SSLDomain(SSLDomain.MODE_CLIENT)
  ssl_domain.set_trusted_ca_db(np.options.cafile)
  # FIXME Make this configurable. VERIFY_PEER_NAME is useful
  ssl_domain.set_peer_authentication(SSLDomain.VERIFY_PEER)

  url = Url()
  url.host = np.options.hostname
  url.port = np.options.port
  url.username = np.options.username
  url.password = np.options.password
  url.scheme = "amqp%s" % ("s" if np.options.ssl else "")
  url.path = "aliveness-test"

  conn = BlockingConnection(url=url)
  receiver = conn.create_receiver(url.path)
  sender = conn.create_sender(url.path)

  sent_msg = Message(
    body="Faxa mig goda kakor.",
    # Test the durable/persistent storage
    durable=True,
    creation_time=int(time.time()),
  )

  sender.send(sent_msg)

  recv_msg = receiver.receive(timeout=np.options.timeout)
  receiver.accept()
  conn.close()

  if recv_msg:
    np.add_status(ok)
    np.add_summary("Received message %r" % (recv_msg))

except Exception, e:
  np.add_status(critical)
  np.add_summary('%s: %r' % (e.__class__.__name__, e))

np.exit()
